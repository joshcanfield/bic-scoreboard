/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/game": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the current game snapshot. */
        get: operations["getGame"];
        /** Update select game fields. */
        put: operations["updateGame"];
        /** Reset the game to its initial state. */
        post: operations["resetGame"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/portName": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Set the active serial port used by the scoreboard adapter. */
        post: operations["setPortName"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/portNames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all available serial ports and the current selection. */
        get: operations["listPortNames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/{team}/goal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Increment a team's score. */
        post: operations["addGoal"];
        /** Decrement a team's score if possible. */
        delete: operations["undoGoal"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/{team}/shot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Increment a team's shot tally. */
        post: operations["addShot"];
        /** Decrement a team's shot tally if possible. */
        delete: operations["undoShot"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/{team}/penalty": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a penalty for the given team. */
        post: operations["addPenalty"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/{team}/penalty/{penaltyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Remove a penalty by identifier. */
        delete: operations["deletePenalty"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/buzzer/{millis}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Trigger the scoreboard buzzer for the specified duration. */
        post: operations["buzzer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/game/power": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Toggle scoreboard update power state. */
        post: operations["togglePower"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description Team selector for score, shot, and penalty operations.
         * @enum {string}
         */
        Team: "home" | "away";
        GameState: {
            /**
             * Format: int32
             * @description Remaining time in the active clock, expressed in milliseconds.
             */
            time: number;
            /** @description Whether the game clock is currently running. */
            running: boolean;
            /**
             * Format: int32
             * @description Current period (0 = warmup).
             */
            period: number;
            /** @description Whether the physical scoreboard updates are enabled. */
            scoreboardOn: boolean;
            gameState: components["schemas"]["ScoreboardGameState"];
            /**
             * Format: int32
             * @description Active period length in minutes (intermission length during intermission).
             */
            periodLength: number;
            home: components["schemas"]["TeamState"];
            away: components["schemas"]["TeamState"];
        };
        TeamState: {
            /**
             * Format: int32
             * @description Goals recorded for the team.
             */
            score: number;
            /**
             * Format: int32
             * @description Shots on goal for the team.
             */
            shots: number;
            /** @description Active penalties for the team. */
            penalties: components["schemas"]["Penalty"][];
        };
        Penalty: {
            /**
             * Format: int32
             * @description Server-assigned identifier.
             */
            id: number;
            /**
             * Format: int32
             * @description Player receiving the penalty.
             */
            playerNumber: number;
            /**
             * Format: int32
             * @description Substitute player serving the penalty, when applicable.
             */
            servingPlayerNumber?: number;
            /**
             * Format: int32
             * @description Penalty duration in seconds.
             */
            time: number;
            /**
             * Format: int32
             * @description Elapsed penalty time in seconds.
             */
            elapsed: number;
            /**
             * Format: int32
             * @description Period when the penalty was issued.
             */
            period: number;
            /**
             * Format: int32
             * @description Time the player spent off the ice.
             */
            offIceTime?: number;
            /**
             * Format: int32
             * @description Clock value when the penalty started, expressed in seconds remaining.
             */
            startTime?: number;
        };
        GameUpdateRequest: {
            /**
             * Format: int32
             * @description Desired period number.
             */
            period?: number;
            /** @description Clock running state toggle. */
            running?: boolean;
            /**
             * Format: int32
             * @description Remaining time to set, in milliseconds.
             */
            time?: number;
        };
        PortSelection: {
            /** @description Serial port to activate. */
            portName: string;
        };
        PortList: {
            /** @description Currently active serial port, if any. */
            currentPort?: string | null;
            /** @description Discoverable serial port identifiers. */
            portNames: string[];
        };
        /** @enum {string} */
        ScoreboardGameState: "PRE_GAME" | "IN_PROGRESS" | "INTERMISSION" | "READY_FOR_PERIOD" | "GAME_OVER";
        UpdateEventPayload: components["schemas"]["GameState"] & {
            /** @description Whether the buzzer is currently sounding. */
            buzzerOn: boolean;
        };
        PowerEventPayload: {
            /** @description Scoreboard power state after a toggle or probe. */
            scoreboardOn: boolean;
        };
        /** @description Payload for goal and shot commands targeting a specific team. */
        TeamCommandPayload: {
            team: components["schemas"]["Team"];
        };
        SetPeriodCommandPayload: {
            /**
             * Format: int32
             * @description Period number to activate.
             */
            period: number;
        };
        CreateGameCommandPayload: {
            /** @description Minutes for warmup and each period. */
            periodLengths?: number[];
            /**
             * Format: int32
             * @description Intermission duration in minutes.
             */
            intermissionDurationMinutes?: number;
            /**
             * Format: int32
             * @description Shift buzzer interval in seconds.
             */
            buzzerIntervalSeconds?: number;
        };
        WebSocketEventEnvelope: {
            /** @description Event name as understood by the native WebSocket server. */
            event: string;
            /** @description Event-specific payload; may be omitted for events without data. */
            data?: unknown;
        };
        /** @description Convenience map of WebSocket event names to representative payload schemas. */
        WebSocketEventPayloads: {
            update?: components["schemas"]["UpdateEventPayload"];
            power?: components["schemas"]["PowerEventPayload"];
            goal?: components["schemas"]["TeamCommandPayload"];
            undo_goal?: components["schemas"]["TeamCommandPayload"];
            shot?: components["schemas"]["TeamCommandPayload"];
            undo_shot?: components["schemas"]["TeamCommandPayload"];
            set_period?: components["schemas"]["SetPeriodCommandPayload"];
            createGame?: components["schemas"]["CreateGameCommandPayload"];
        };
    };
    responses: never;
    parameters: {
        /** @description Team identifier. */
        TeamParam: components["schemas"]["Team"];
        /** @description Unique penalty identifier. */
        PenaltyIdParam: number;
        /** @description Duration in milliseconds to ring the buzzer. */
        BuzzerDurationParam: number;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getGame: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current game state. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameState"];
                };
            };
        };
    };
    updateGame: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GameUpdateRequest"];
            };
        };
        responses: {
            /** @description Game state after update. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameState"];
                };
            };
        };
    };
    resetGame: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Game state after reset. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GameState"];
                };
            };
        };
    };
    setPortName: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PortSelection"];
            };
        };
        responses: {
            /** @description Available ports after configuration update. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PortList"];
                };
            };
        };
    };
    listPortNames: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Available serial ports. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PortList"];
                };
            };
        };
    };
    addGoal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team identifier. */
                team: components["parameters"]["TeamParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Goal recorded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    undoGoal: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team identifier. */
                team: components["parameters"]["TeamParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Goal removed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addShot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team identifier. */
                team: components["parameters"]["TeamParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shot recorded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    undoShot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team identifier. */
                team: components["parameters"]["TeamParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shot removed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    addPenalty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team identifier. */
                team: components["parameters"]["TeamParam"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Penalty"];
            };
        };
        responses: {
            /** @description Penalty accepted. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Penalty"];
                };
            };
        };
    };
    deletePenalty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Team identifier. */
                team: components["parameters"]["TeamParam"];
                /** @description Unique penalty identifier. */
                penaltyId: components["parameters"]["PenaltyIdParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Penalty removed. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    buzzer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Duration in milliseconds to ring the buzzer. */
                millis: components["parameters"]["BuzzerDurationParam"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Buzzer triggered. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    togglePower: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Power state toggled. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
